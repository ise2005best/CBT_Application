
import com.opencsv.CSVWriter;
import com.sun.source.tree.TryTree;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import java.util.Date;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author iseoluwaariyibi
 */
public class questions_page extends javax.swing.JFrame {

    List<String[]> questionsList = new ArrayList<>();
    String[] questionNumber = {"Question 1", "Question 2", "Question 3", "Question 4", "Question 5", "Question 6", "Question 7 ", "Question 8", "Question 9"};
    int currentIndex = 0;
    int totalScore = 0;
    String usersEmail = login_student.jTextField1.getText();
    String usersMatricNumber;
    int CBTTime = Integer.parseInt(new Admin_dashboard().jLabel33.getText().substring(0, 2));
    int numberOfQuestions = Integer.parseInt(new Admin_dashboard().jLabel34.getText());
    int hours = 0;
    int minutes = CBTTime;
    int seconds = 0;
    List<Integer> questionIds = new ArrayList<>();

    public class time implements Runnable {

        public void run() {

            int totalSeconds = hours * 3600 + minutes * 60 + seconds;
            while (totalSeconds > 0) {
                int remainingHours = totalSeconds / 3600;
                int remainingMinutes = (totalSeconds % 3600) / 60;
                int remainingSeconds = totalSeconds % 60;
                String formattedTime = String.format("Time Remaining: %02d:%02d:%02d:%n", remainingHours, remainingMinutes, remainingSeconds);
                jLabel1.setText(formattedTime);
                try {
                    TimeUnit.SECONDS.sleep(1);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                totalSeconds--;
            }
            String formattedTime = String.format("Time Remaining: %02d:%02d:%02d%n", 0, 0, 0);
            jLabel1.setText(formattedTime);
            JOptionPane.showMessageDialog(rootPane, "Time Up!! ", "Time Up!!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    String[] usersAnswers = new String[numberOfQuestions];

    /**
     * Creates new form questions_page
     */
    public questions_page() {
        initComponents();
        time t = new time();
        Thread t1 = new Thread(t);
        t1.start();
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM students WHERE email = ?");
            ps.setString(1, usersEmail);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                boolean result = rs.getBoolean("test-taken");
                System.out.println(result);
                if (result == false) {
                    AnotherClass();
                    studentsAnswers();
                    getQuestionsId();
                    displayQuestions();
                } else {
                    JOptionPane.showMessageDialog(rootPane, "You have sucessfully answered this test please exit");
                    System.exit(0);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Previous");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("jLabel1");

        jLabel3.setText("A)");

        jLabel4.setText("B)");

        jLabel5.setText("C)");

        jLabel6.setText("D)");

        jLabel11.setFont(new java.awt.Font("Hiragino Mincho ProN", 0, 18)); // NOI18N

        jButton2.setText("Next");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("Submit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(391, 391, 391))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(32, 32, 32)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRadioButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(41, 41, 41)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jButton1)
                        .addGap(126, 126, 126)
                        .addComponent(jButton2)
                        .addGap(150, 150, 150)
                        .addComponent(jButton3)))
                .addContainerGap(271, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(380, 380, 380))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 9, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)
                                    .addComponent(jButton3)))
                            .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jLabel5)))
                        .addGap(49, 49, 49)
                        .addComponent(jLabel6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void AnotherClass() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            PreparedStatement ps = con.prepareStatement("SELECT * FROM questions ");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String questions = rs.getString("question");
                String optionA = rs.getString("optionA");
                String optionB = rs.getString("optionB");
                String optionC = rs.getString("optionC");
                String optionD = rs.getString("optionD");
                String correctAnswer = rs.getString("correctAnswer");

                String[] questionsForCBT = {questions, optionA, optionB, optionC, optionD, correctAnswer};

                questionsList.add(Arrays.copyOf(questionsForCBT, questionsForCBT.length));

                Collections.shuffle(questionsList);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    public String getUsersMatricNumber(String email) {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            PreparedStatement ps = con.prepareStatement("SELECT matricNumber FROM students WHERE email = ? ");
            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                usersMatricNumber = rs.getString(1);
                return usersMatricNumber;
            }
        } catch (Exception e) {
            System.err.println(e);
            usersMatricNumber = null;
        }
        return null;
    }

    private void displayQuestions() {
        if (currentIndex < numberOfQuestions) {
            jLabel2.setText(questionNumber[currentIndex]);
            jLabel11.setText(questionsList.get(currentIndex)[0]);
            jRadioButton4.setText(questionsList.get(currentIndex)[1]);
            jRadioButton1.setText(questionsList.get(currentIndex)[2]);
            jRadioButton2.setText(questionsList.get(currentIndex)[3]);
            jRadioButton3.setText(questionsList.get(currentIndex)[4]);

        } else if (currentIndex >= numberOfQuestions || currentIndex == -1) {
            JOptionPane.showMessageDialog(rootPane, "This is the end of the questions, Please click Submit to submit");
        }
    }

    public void getQuestionsId() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            for (int i = 0; i < questionsList.size(); i++) {
                PreparedStatement ps = con.prepareStatement("SELECT questionsID FROM questions WHERE question = ? ");
                ps.setString(1, questionsList.get(i)[0]);
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    int questionId = rs.getInt("questionsID");
                    questionIds.add(questionId);
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    public void setTestTaken() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            PreparedStatement ps = con.prepareStatement("UPDATE students SET `test-taken` = 1 WHERE email = ?");
            ps.setString(1, usersEmail);
            int rs = ps.executeUpdate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    public void addToStudentScoreScirpts() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            PreparedStatement ps = con.prepareStatement("INSERT INTO studentScores (studentLevel, studentCourse, studentScore, matricNumber) VALUES (?, ?, ?, ?)");
            ps.setInt(1, 300);
            ps.setString(2, "CSC302");
            ps.setInt(3, totalScore);
            ps.setString(4, usersMatricNumber);
            int rs = ps.executeUpdate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
    }

    public void sendStudentTestScore() {
        String senderEmail = "iseoluwaariyibi@gmail.com";
        // password generated by app and not actual password
        String senderPassword = "osywdikxkrhyloru";
        Properties props = new Properties();
        props.put("mail.smtp.auth", true);
        props.put("mail.smtp.starttls.enable", true);
        props.put("mail.smtp.host", "smtp.gmail.com");
        props.put("mail.smtp.port", "587");

        Session session = Session.getInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(senderEmail, senderPassword);
            }
        }
        );
        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(senderEmail));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(usersEmail));
            message.setSubject("Successfull Registration");
            message.setText(
                    "        Here is your score on your recent test " + "!\n"
                    + "          Your Score :  " + totalScore + " / " + numberOfQuestions + "\n "
                    + "        This is a system-generated email. Please do not reply.\n"
            );
            Transport.send(message);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

    }

    public void addStudentScoreToCsv() {
        String filePath = "/Users/iseoluwaariyibi/Downloads/student_scores.csv";
        try {
            FileWriter fileWriter = new FileWriter(filePath, true);
            CSVWriter csvWriter = new CSVWriter(fileWriter);

            // to let the new data be on a new row
            csvWriter.writeNext(new String[]{null, null, null, null});
            // Create an array with data for the current column
            String totalScoreInString = Integer.toString(totalScore);
            String[] rowData = new String[]{usersMatricNumber, "300", "CSC302", totalScoreInString};

            // Write the data array to the CSV file
            csvWriter.writeNext(rowData);

            // Close the CSV writer
            csvWriter.close();
        } catch (Exception e) {
        }
    }
    
    public void addToStudentResultTable(){
        Admin_dashboard tableModels = new Admin_dashboard();
         DefaultTableModel tableModel = (DefaultTableModel) tableModels.jTable3.getModel();
         String totalScoreInString = Integer.toString(totalScore);
         String [] data = {usersMatricNumber, totalScoreInString};
         tableModel.addRow(data);
    }

    boolean[] selectedButtons = new boolean[numberOfQuestions];

    private void studentsAnswers() {
        // to store the current value of the jRadioButtons
        selectedButtons[0] = jRadioButton1.isSelected();
        selectedButtons[1] = jRadioButton2.isSelected();
        selectedButtons[2] = jRadioButton3.isSelected();
        selectedButtons[3] = jRadioButton4.isSelected();
        if (jRadioButton1.isSelected()) {
            usersAnswers[currentIndex] = jRadioButton1.getText();
        }
        if (jRadioButton2.isSelected()) {
            usersAnswers[currentIndex] = jRadioButton2.getText();
        }
        if (jRadioButton3.isSelected()) {
            usersAnswers[currentIndex] = jRadioButton3.getText();
        }
        if (jRadioButton4.isSelected()) {
            usersAnswers[currentIndex] = jRadioButton4.getText();
        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        currentIndex++;
        displayQuestions();
        studentsAnswers();
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (currentIndex > 0) {
            currentIndex--;
            displayQuestions();
            studentsAnswers();
            jRadioButton1.setSelected(selectedButtons[0]);
            jRadioButton2.setSelected(selectedButtons[1]);
            jRadioButton3.setSelected(selectedButtons[2]);
            jRadioButton4.setSelected(selectedButtons[3]);
        } else {
            JOptionPane.showMessageDialog(rootPane, "This is the first question");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        studentsAnswers();
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        studentsAnswers();
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        studentsAnswers();
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        studentsAnswers();
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int startIndex = 0;
        int endIndex = numberOfQuestions;
        List<String[]> subList = questionsList.subList(startIndex, endIndex);
        String[] correctAnswers = new String[subList.size()];
        String matricNumber = getUsersMatricNumber(usersEmail);
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306" + "/CBT_TEST", "root", "damilOlamide14$");
            for (int i = 0; i < subList.size(); i++) {
                PreparedStatement ps = con.prepareStatement("INSERT INTO scripts (questionsID, matricNumber, usersAnswer, score) VALUES (?, ?, ?, ?) ");
                String[] question = subList.get(i);
                correctAnswers[i] = question[5];
                String correctAnswer = correctAnswers[i];
                String userAnswer = usersAnswers[i];
                int questionScore = correctAnswer.equals(userAnswer) ? 1 : 0;
                int questionsId = questionIds.get(i);
                String usersAnswer = usersAnswers[i];
                totalScore += questionScore;
                ps.setInt(1, questionsId);
                ps.setString(2, matricNumber);
                ps.setString(3, usersAnswer);
                ps.setInt(4, questionScore);
                int rs = ps.executeUpdate();
            }
            setTestTaken();
            addToStudentScoreScirpts();
            sendStudentTestScore();
            addStudentScoreToCsv();
            addToStudentScoreScirpts();
            int option = JOptionPane.showConfirmDialog(rootPane, "Your total score is "+ totalScore +"\n"+"Click me to view your scripts", "View Scipts!", JOptionPane.DEFAULT_OPTION);
            if(option == 0){
               new student_scripts().setVisible(true);
               new questions_page().setVisible(false);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }

        // list of things to do here
        // send students score to students email
        // ensure a student cant retake the questions
        // create a jFrame after this and pass score and questionList
        // add correctAnswer and questionScore to the database
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(questions_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(questions_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(questions_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(questions_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new questions_page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JLabel jLabel1;
    public static javax.swing.JLabel jLabel11;
    public static javax.swing.JLabel jLabel2;
    public static javax.swing.JLabel jLabel3;
    public static javax.swing.JLabel jLabel4;
    public static javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    public static javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    // End of variables declaration//GEN-END:variables
}
